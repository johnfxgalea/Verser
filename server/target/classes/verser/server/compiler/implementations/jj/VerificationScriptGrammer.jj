/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. VerificationScriptGrammer.jj */
/*@egen*/options
{
  JDK_VERSION = "1.7";
                  // causes a Visitor interface to get generated

  static = false;
               
                          
                           
                                  
                      
                                                                        
                                        
}

PARSER_BEGIN(VerificationScriptGrammar)
package verser.server.compiler.implementations.jj;
import verser.server.compiler.interfaces.VerificationScriptCompiler;
import verser.server.compiler.interfaces.VerificationScriptException;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.Map;
import java.util.HashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class VerificationScriptGrammar implements/*@bgen(jjtree)*/ VerificationScriptGrammarTreeConstants, /*@egen*/ VerificationScriptCompiler
{/*@bgen(jjtree)*/
  protected JJTVerificationScriptGrammarState jjtree = new JJTVerificationScriptGrammarState();

/*@egen*/
  public VerificationScriptGrammar()
  {
  }

  public byte [] compile(InputStream inputStream) throws VerificationScriptException
  {
    try
    {
      VerificationScriptGrammar parser = new VerificationScriptGrammar(inputStream);
      SimpleNode node = parser.VerificationScript();
      //Structure Check Visitor Block
      VisitorStructureCheck structCheckVisitor = new VisitorStructureCheck();
      VisitorResult result = node.jjtAccept(structCheckVisitor, null);
      if (!result.isSuccessful())
      {
        throw new ParseException("Structure Error Detected");
      }
      // Code Compilation VisitorBlock
      {
        CodeBuilder codeBuilder = new CodeBuilder();
      	System.out.println("Done 1");
        
        codeBuilder.initCodeBuilder();
      	System.out.println("Done 2 "+ structCheckVisitor.getNumberOfIdentifiers());
        
        VerificationScriptGrammarVisitor generateCodeVisitor = new VisitorGenerateCode(codeBuilder, structCheckVisitor.getNumberOfIdentifiers());
      	System.out.println("Done 3");

        VisitorResult goodresult = node.jjtAccept(generateCodeVisitor, null);

      	System.out.println("Done");
     	return codeBuilder.getCode();
      }
    }
    catch (Exception e)
    {
      throw new VerificationScriptException(e.getMessage());
    }
  }
}

PARSER_END(VerificationScriptGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~[ "\r", "\n" ])* >
}

TOKEN :
{
  < SERVICE : "service" >
| < BY : "by" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < TYPE :
    (
      "string"
    | "int"
    ) >
| < VERIFICATION : "verification" >
| < FLOW : "<-" >
  // Operators
| < RELATIONOP :
    "<="
  | ">="
  | "=="
  | "!="
  | "<"
  | ">" >
| < LOGICALOP :
    "&&"
  | "||" >
| < ADDITIVEOP :
    "+"
  | "-" >
| < ASSIGNMENTOP : "=" >
  // Structure Symbols
| < UNDERSCORE : "_" >
| < OPENBRACKET : "(" >
| < CLOSEBRACKET : ")" >
| < OPENCBRACKET : "{" >
| < CLOSECBRACKET : "}" >
| < OPENSQBRACKET : "[" >
| < CLOSESQBRACKET : "]" >
| < COMMA : "," >
| < COLAN : ":" >
| < VOID : "void" >
| < SEMICOLON : ";" >
| < QUOTE : "\"" >
| < STRING :
    (
      < QUOTE > (~[ "\"" ])+ < QUOTE >
    ) >
| < INTEGER : (< DIGIT >)+ >
| < WORD :
    (
    < LETTER >
    )
    (
      < UNDERSCORE >
    | < LETTER >
    | < DIGIT >
    )* >
| < LETTER : [ "a"-"z", "A"-"Z" ] >
| < DIGIT : [ "0"-"9" ] >
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  VS_Identifier jjtn000 = new VS_Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < WORD >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Integer() :
{/*@bgen(jjtree) Integer */
  VS_Integer jjtn000 = new VS_Integer(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void String() :
{/*@bgen(jjtree) String */
  VS_String jjtn000 = new VS_String(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t = < STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type() :
{/*@bgen(jjtree) Type */
  VS_Type jjtn000 = new VS_Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  t = < TYPE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Void() :
{/*@bgen(jjtree) Void */
  VS_Void jjtn000 = new VS_Void(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Void */
  try {
/*@egen*/
  t = < VOID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IntegerLiteral() :
{/*@bgen(jjtree) IntegerLiteral */
  VS_IntegerLiteral jjtn000 = new VS_IntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IntegerLiteral */
  try {
/*@egen*/
  (
    Integer()
  | Identifier()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AllLiteral() :
{/*@bgen(jjtree) AllLiteral */
  VS_AllLiteral jjtn000 = new VS_AllLiteral(JJTALLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AllLiteral */
  try {
/*@egen*/
  (
    IntegerLiteral()
  | String()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IdentifierList() :
{/*@bgen(jjtree) IdentifierList */
  VS_IdentifierList jjtn000 = new VS_IdentifierList(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifierList */
  try {
/*@egen*/
  Identifier()
  (
    < COMMA > Identifier()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeList() :
{/*@bgen(jjtree) TypeList */
  VS_TypeList jjtn000 = new VS_TypeList(JJTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeList */
  try {
/*@egen*/
  Type()
  (
    < COMMA > Type()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeDeclaration() :
{/*@bgen(jjtree) TypeDeclaration */
  VS_TypeDeclaration jjtn000 = new VS_TypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) TypeDeclaration */
  try {
/*@egen*/
  < OPENBRACKET >
  (
    Type()
  | 
    Void()
  |
    (
      < OPENCBRACKET > TypeList() < CLOSECBRACKET >
    )
  )
  < FLOW >
  (
    Type()
  | 
    Void()
  |
    (
      < OPENCBRACKET > TypeList() < CLOSECBRACKET >
    )
  )
  < CLOSEBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IntegerLiteralList() :
{/*@bgen(jjtree) IntegerLiteralList */
  VS_IntegerLiteralList jjtn000 = new VS_IntegerLiteralList(JJTINTEGERLITERALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IntegerLiteralList */
  try {
/*@egen*/
  (
    Expression()
  )
  (
    < COMMA >
    (
      Expression()
    )
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ALLLiteralList() :
{/*@bgen(jjtree) ALLLiteralList */
  VS_ALLLiteralList jjtn000 = new VS_ALLLiteralList(JJTALLLITERALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ALLLiteralList */
  try {
/*@egen*/
  (
    LOOKAHEAD(Expression())
    Expression()
  | AllLiteral()
  )
  (
    < COMMA >
    (
      LOOKAHEAD(Expression())
      Expression()
    | AllLiteral()
    )
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CapabilityDeclaration() :
{/*@bgen(jjtree) CapabilityDeclaration */
  VS_CapabilityDeclaration jjtn000 = new VS_CapabilityDeclaration(JJTCAPABILITYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CapabilityDeclaration */
  try {
/*@egen*/
  < SERVICE > String() Identifier() TypeDeclaration() < BY > String() < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Additive() :
{/*@bgen(jjtree) Additive */
  VS_Additive jjtn000 = new VS_Additive(JJTADDITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Additive */
  try {
/*@egen*/
  t = < ADDITIVEOP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SimpleExpression() :
{/*@bgen(jjtree) SimpleExpression */
  VS_SimpleExpression jjtn000 = new VS_SimpleExpression(JJTSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SimpleExpression */
  try {
/*@egen*/
  IntegerLiteral()
  (
    Additive() IntegerLiteral()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Relation() :
{/*@bgen(jjtree) Relation */
  VS_Relation jjtn000 = new VS_Relation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Relation */
  try {
/*@egen*/
  t = < RELATIONOP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Logic() :
{/*@bgen(jjtree) Logic */
  VS_Logic jjtn000 = new VS_Logic(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Logic */
  try {
/*@egen*/
  t = < LOGICALOP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = (String) (t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelationExpression() :
{/*@bgen(jjtree) RelationExpression */
  VS_RelationExpression jjtn000 = new VS_RelationExpression(JJTRELATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationExpression */
  try {
/*@egen*/
  SimpleExpression()
  (
    Relation() SimpleExpression()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
  VS_Expression jjtn000 = new VS_Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  RelationExpression()
  (
    Logic() RelationExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayALLInNode() :
{/*@bgen(jjtree) ArrayALLInNode */
  VS_ArrayALLInNode jjtn000 = new VS_ArrayALLInNode(JJTARRAYALLINNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ArrayALLInNode */
  try {
/*@egen*/
  < OPENCBRACKET > ALLLiteralList() < CLOSECBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayIntegerInNode() :
{/*@bgen(jjtree) ArrayIntegerInNode */
  VS_ArrayIntegerInNode jjtn000 = new VS_ArrayIntegerInNode(JJTARRAYINTEGERINNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ArrayIntegerInNode */
  try {
/*@egen*/
  < OPENCBRACKET > IntegerLiteralList() < CLOSECBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayOutNode() :
{/*@bgen(jjtree) ArrayOutNode */
  VS_ArrayOutNode jjtn000 = new VS_ArrayOutNode(JJTARRAYOUTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ArrayOutNode */
  try {
/*@egen*/
  < OPENCBRACKET > IdentifierList() < CLOSECBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CapabilityNode() :
{/*@bgen(jjtree) CapabilityNode */
  VS_CapabilityNode jjtn000 = new VS_CapabilityNode(JJTCAPABILITYNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CapabilityNode */
  try {
/*@egen*/
  < OPENSQBRACKET > Identifier() < CLOSESQBRACKET >
  (
    < FLOW >
    (
      ArrayALLInNode()
    | LOOKAHEAD(Expression())
      Expression()
    | AllLiteral()
    )
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IdentifierFlowStatement() :
{/*@bgen(jjtree) IdentifierFlowStatement */
  VS_IdentifierFlowStatement jjtn000 = new VS_IdentifierFlowStatement(JJTIDENTIFIERFLOWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IdentifierFlowStatement */
  try {
/*@egen*/
  Identifier() < FLOW >
  (
    CapabilityNode()
  | LOOKAHEAD(Expression())
    Expression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayOutNodeFlowStatement() :
{/*@bgen(jjtree) ArrayOutNodeFlowStatement */
  VS_ArrayOutNodeFlowStatement jjtn000 = new VS_ArrayOutNodeFlowStatement(JJTARRAYOUTNODEFLOWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ArrayOutNodeFlowStatement */
  try {
/*@egen*/
  ArrayOutNode() < FLOW >
  (
    CapabilityNode()
  | ArrayIntegerInNode()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FlowStatement() :
{/*@bgen(jjtree) FlowStatement */
  VS_FlowStatement jjtn000 = new VS_FlowStatement(JJTFLOWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FlowStatement */
  try {
/*@egen*/
  (
    IdentifierFlowStatement()
  | ArrayOutNodeFlowStatement()
  | CapabilityNode()
  )
  < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StatementBlock() :
{/*@bgen(jjtree) StatementBlock */
  VS_StatementBlock jjtn000 = new VS_StatementBlock(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) StatementBlock */
 try {
/*@egen*/
 (
    Statement()
  )*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
} 

void IfStatement() :
{/*@bgen(jjtree) IfStatement */
  VS_IfStatement jjtn000 = new VS_IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  < IF > 
  < OPENBRACKET > 
  Expression() 
  < CLOSEBRACKET > 
  < OPENCBRACKET >
 StatementBlock()
  < CLOSECBRACKET >
  (
    < ELSE > 
    < OPENCBRACKET >
    StatementBlock()
    < CLOSECBRACKET >
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  VS_WhileStatement jjtn000 = new VS_WhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  < WHILE > 
  < OPENBRACKET > 
  Expression() 
  < CLOSEBRACKET > 
  < OPENCBRACKET >
  StatementBlock()
  < CLOSECBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement() :
{/*@bgen(jjtree) Statement */
  VS_Statement jjtn000 = new VS_Statement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  WhileStatement()
| 
  IfStatement()
| 
  FlowStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VerificationBlock() :
{/*@bgen(jjtree) VerificationBlock */
  VS_VerificationBlock jjtn000 = new VS_VerificationBlock(JJTVERIFICATIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) VerificationBlock */
  try {
/*@egen*/
  < VERIFICATION > 
  < OPENCBRACKET >
  StatementBlock()
  < CLOSECBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode VerificationScript() :
{/*@bgen(jjtree) VerificationScript */
  VS_VerificationScript jjtn000 = new VS_VerificationScript(JJTVERIFICATIONSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VerificationScript */
  try {
/*@egen*/
  (
    CapabilityDeclaration()
  )*
  VerificationBlock() < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
