options
{
  JDK_VERSION = "1.7";
  VISITOR = true; // causes a Visitor interface to get generated

  static = false;
  MULTI = true;
  BUILD_NODE_FILES = true;
  NODE_USES_PARSER = false;
  //prefix of the name of the node
  NODE_PREFIX = "VS_";
  //the visitors returns a general object to cater for all the visitors 
  VISITOR_RETURN_TYPE = "VisitorResult";
}

PARSER_BEGIN(VerificationScriptGrammar)
package verser.server.compiler.implementations.jj;
import verser.server.compiler.interfaces.VerificationScriptCompiler;
import verser.server.compiler.interfaces.VerificationScriptException;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.Map;
import java.util.HashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class VerificationScriptGrammar implements VerificationScriptCompiler
{
  public VerificationScriptGrammar()
  {
  }

  public byte [] compile(InputStream inputStream) throws VerificationScriptException
  {
    try
    {
      VerificationScriptGrammar parser = new VerificationScriptGrammar(inputStream);
      SimpleNode node = parser.VerificationScript();
      //Structure Check Visitor Block
      VisitorStructureCheck structCheckVisitor = new VisitorStructureCheck();
      VisitorResult result = node.jjtAccept(structCheckVisitor, null);
      if (!result.isSuccessful())
      {
        throw new ParseException("Structure Error Detected");
      }
      // Code Compilation VisitorBlock
      {
        CodeBuilder codeBuilder = new CodeBuilder();
      	System.out.println("Done 1");
        
        codeBuilder.initCodeBuilder();
      	System.out.println("Done 2 "+ structCheckVisitor.getNumberOfIdentifiers());
        
        VerificationScriptGrammarVisitor generateCodeVisitor = new VisitorGenerateCode(codeBuilder, structCheckVisitor.getNumberOfIdentifiers());
      	System.out.println("Done 3");

        VisitorResult goodresult = node.jjtAccept(generateCodeVisitor, null);

      	System.out.println("Done");
     	return codeBuilder.getCode();
      }
    }
    catch (Exception e)
    {
      throw new VerificationScriptException(e.getMessage());
    }
  }
}

PARSER_END(VerificationScriptGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~[ "\r", "\n" ])* >
}

TOKEN :
{
  < SERVICE : "service" >
| < BY : "by" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < TYPE :
    (
      "string"
    | "int"
    ) >
| < VERIFICATION : "verification" >
| < FLOW : "<-" >
  // Operators
| < RELATIONOP :
    "<="
  | ">="
  | "=="
  | "!="
  | "<"
  | ">" >
| < LOGICALOP :
    "&&"
  | "||" >
| < ADDITIVEOP :
    "+"
  | "-" >
| < ASSIGNMENTOP : "=" >
  // Structure Symbols
| < UNDERSCORE : "_" >
| < OPENBRACKET : "(" >
| < CLOSEBRACKET : ")" >
| < OPENCBRACKET : "{" >
| < CLOSECBRACKET : "}" >
| < OPENSQBRACKET : "[" >
| < CLOSESQBRACKET : "]" >
| < COMMA : "," >
| < COLAN : ":" >
| < VOID : "void" >
| < SEMICOLON : ";" >
| < QUOTE : "\"" >
| < STRING :
    (
      < QUOTE > (~[ "\"" ])+ < QUOTE >
    ) >
| < INTEGER : (< DIGIT >)+ >
| < WORD :
    (
    < LETTER >
    )
    (
      < UNDERSCORE >
    | < LETTER >
    | < DIGIT >
    )* >
| < LETTER : [ "a"-"z", "A"-"Z" ] >
| < DIGIT : [ "0"-"9" ] >
}

void Identifier() :
{
  Token t;
}
{
  t = < WORD >
  {
    jjtThis.value = (String) (t.image);
  }
}

void Integer() :
{
  Token t;
}
{
  t = < INTEGER >
  {
    jjtThis.value = (String) (t.image);
  }
}

void String() :
{
  Token t;
}
{
  t = < STRING >
  {
    jjtThis.value = (String) (t.image);
  }
}

void Type() :
{
  Token t;
}
{
  t = < TYPE >
  {
    jjtThis.value = (String) (t.image);
  }
}

void Void() :
{
  Token t;
}
{
  t = < VOID >
  {
    jjtThis.value = (String) (t.image);
  }
}

void IntegerLiteral() :
{
}
{
  (
    Integer()
  | Identifier()
  )
}

void AllLiteral() :
{
}
{
  (
    IntegerLiteral()
  | String()
  )
}

void IdentifierList() :
{}
{
  Identifier()
  (
    < COMMA > Identifier()
  )*
}

void TypeList() :
{}
{
  Type()
  (
    < COMMA > Type()
  )*
}

void TypeDeclaration() :
{
}
{
  < OPENBRACKET >
  (
    Type()
  | 
    Void()
  |
    (
      < OPENCBRACKET > TypeList() < CLOSECBRACKET >
    )
  )
  < FLOW >
  (
    Type()
  | 
    Void()
  |
    (
      < OPENCBRACKET > TypeList() < CLOSECBRACKET >
    )
  )
  < CLOSEBRACKET >
}

void IntegerLiteralList() :
{
}
{
  (
    Expression()
  )
  (
    < COMMA >
    (
      Expression()
    )
  )*
}

void ALLLiteralList() :
{
}
{
  (
    LOOKAHEAD(Expression())
    Expression()
  | AllLiteral()
  )
  (
    < COMMA >
    (
      LOOKAHEAD(Expression())
      Expression()
    | AllLiteral()
    )
  )*
}

void CapabilityDeclaration() :
{
}
{
  < SERVICE > String() Identifier() TypeDeclaration() < BY > String() < SEMICOLON >
}

void Additive() :
{
  Token t;
}
{
  t = < ADDITIVEOP >
  {
    jjtThis.value = (String) (t.image);
  }
}

void SimpleExpression() :
{
}
{
  IntegerLiteral()
  (
    Additive() IntegerLiteral()
  )*
}

void Relation() :
{
  Token t;
}
{
  t = < RELATIONOP >
  {
    jjtThis.value = (String) (t.image);
  }
}

void Logic() :
{
  Token t;
}
{
  t = < LOGICALOP >
  {
    jjtThis.value = (String) (t.image);
  }
}

void RelationExpression() :
{}
{
  SimpleExpression()
  (
    Relation() SimpleExpression()
  )?
}

void Expression() :
{}
{
  RelationExpression()
  (
    Logic() RelationExpression()
  )*
}

void ArrayALLInNode() :
{
}
{
  < OPENCBRACKET > ALLLiteralList() < CLOSECBRACKET >
}

void ArrayIntegerInNode() :
{
}
{
  < OPENCBRACKET > IntegerLiteralList() < CLOSECBRACKET >
}

void ArrayOutNode() :
{
}
{
  < OPENCBRACKET > IdentifierList() < CLOSECBRACKET >
}

void CapabilityNode() :
{
}
{
  < OPENSQBRACKET > Identifier() < CLOSESQBRACKET >
  (
    < FLOW >
    (
      ArrayALLInNode()
    | LOOKAHEAD(Expression())
      Expression()
    | AllLiteral()
    )
  )?
}

void IdentifierFlowStatement() :
{
}
{
  Identifier() < FLOW >
  (
    CapabilityNode()
  | LOOKAHEAD(Expression())
    Expression()
  )
}

void ArrayOutNodeFlowStatement() :
{
}
{
  ArrayOutNode() < FLOW >
  (
    CapabilityNode()
  | ArrayIntegerInNode()
  )
}

void FlowStatement() :
{
}
{
  (
    IdentifierFlowStatement()
  | ArrayOutNodeFlowStatement()
  | CapabilityNode()
  )
  < SEMICOLON >
}

void StatementBlock() :
{
}
{
 (
    Statement()
  )*
} 

void IfStatement() :
{
}
{
  < IF > 
  < OPENBRACKET > 
  Expression() 
  < CLOSEBRACKET > 
  < OPENCBRACKET >
 StatementBlock()
  < CLOSECBRACKET >
  (
    < ELSE > 
    < OPENCBRACKET >
    StatementBlock()
    < CLOSECBRACKET >
  )?
}

void WhileStatement() :
{
}
{
  < WHILE > 
  < OPENBRACKET > 
  Expression() 
  < CLOSEBRACKET > 
  < OPENCBRACKET >
  StatementBlock()
  < CLOSECBRACKET >
}

void Statement() :
{
}
{
  WhileStatement()
| 
  IfStatement()
| 
  FlowStatement()
}

void VerificationBlock() :
{
}
{
  < VERIFICATION > 
  < OPENCBRACKET >
  StatementBlock()
  < CLOSECBRACKET >
}

SimpleNode VerificationScript() :
{}
{
  (
    CapabilityDeclaration()
  )*
  VerificationBlock() < EOF >
  {
    return jjtThis;
  }
}
